OK, so you want to backup a tree from one partition to another.  That's
what rsyncbtrfs is for. If you want to backup stuff from and onto the
same partition, just use the btrfs snapshot facility (not sure if you
can call that a backup anymore).

Let's learn about rsyncbtrfs with an example:
We have a backup partition /dev/sdb1 which is mounted under /backup.
We want to backup our root /, and our home directory /home/joe. We
assume that / and /home/joe live on separate paritions.

Note that the backup partition must be formatted as btrfs.

Here's one way to structure the backup parition:

$ mkdir /backup/home-joe
$ mkdir /backup/sys

So the backup of our home directory will reside under /backup/home-joe,
etc.

Next, we need to initialize each backup directory and we'll be half way
there:

$ rsyncbtrfs init /backup/home-joe
$ rsyncbtrfs init /backup/sys

All "init" does is that it creates an empty file called .rsyncbtrfs
under the given path which is checked by backup command to ensure
mistypes of destination doesn't cause unwanted fresh copies.

Now let's back it all up:

$ rsyncbtrfs backup /home/joe /backup/home-joe
$ rsyncbtrfs backup /         /backup/sys

Note that rsyncbtrfs bind-mounts the source (e.g. /home/joe) under a
temporary directory. This means that any other mount point under the
source path will be ignored. If you wish to include any of those mount
points, back them up separately. If you wish to exclude any from being
backed up, use rsync's --exclude option following all the command line
arguments of rsyncbtrfs. Here's an example:

$ rsyncbtrfs backup / /backup/sys --exclude='/tmp/**'

Here, we exclude content of /tmp.

At this point, you have backed up your home and root directories. Here
is how your backup parition should look like now:

/backup
  |- home-joe
     |- cur
     \- 2010-09-09-12:55:55
  \- sys
     |- cur
     \- 2010-09-09-16:55:55

Obviously, the times and dates would be different. cur is a symlink to
the latest backup directory, in case of home-joe, 2010-09-09-12:55:55.
If you were to run the backup again, this is what you'll get:

/backup
  |- home-joe
     |- cur
     |- 2010-09-09-12:55:55
     \- 2010-12-30-20:00:00
  \- sys
     |- cur
     |- 2010-09-09-12:55:55
     \- 2010-12-30-23:00:00

Note that rsyncbtrfs *only* creates a timestamped directory if the
backup was successful. Furthermore, cur is only changed to point to the
new backup if the backup is successful. In case of unsuccessful backup,
nothing is changed. However, a directory in dst with a name like
.inprog-XXXXX may remain which should be cleaned up. To take full
advantage of btrfs COW functionality, --inplace flag of rsync is used by
default. This flag tells rsync to only write the updated data in a file
instead of creating a new copy and moving it into place. Using this flag
has several (possibly negative) side effects which you should be aware
of. Consult rsync's man page for further details.

That's it folks. To see the command line options of rsyncbtrfs, run it
bare.
