OK, so you want to backup a tree from one partition to another.  That's
what rsyncbtrfs is for. If you want to backup stuff from and onto the
same partition, just use the btrfs snapshot facility (not sure if you
can call that a backup anymore).

Let's learn about rsyncbtrfs with an example:
We have a backup partition /dev/sdb1 which is mounted under /backup.
We want to backup our root /, and our home directory /home/joe. We
assume that / and /home/joe live on separate paritions.

NOTE that the backup partition must be formatted as btrfs.

Here's one way to structure the backup parition:

$ mkdir /backup/home-joe
$ mkdir /backup/sys

So the backup of our home directory will reside under /backup/home-joe,
etc.

Next, we need to initialize each backup directory and we'll be half way
there:

$ rsyncbtrfs init /backup /backup/home-joe
$ rsyncbtrfs init /backup /backup/sys

The first argument is the root of the btrfs partition. rsyncbtrfs needs
this so it can remount the volume as read/write at start and readonly in
the end. All "init" does is that it creates a btrfs subvolume named
"cur" under the given path.

Now let's back it all up:

$ rsyncbtrfs backup /backup /backup/home-joe /home/joe
$ rsyncbtrfs backup /backup /backup/sys      /

NOTE that rsyncbtrfs bind-mounts the source (e.g. /home/joe) under a
temporary directory. This means that any other mount point under the
source path will be ignored. If you wish to include any of those mount
points, back them up separately. If you wish to exclude any from being
backup up, use rsync's --exclude option following all the command line
arguments of rsyncbtrfs. Here's an example:

$ rsyncbtrfs backup /backup /backup/sys / --exclude='/tmp/**'

Here, we prevent content of /tmp to be backed up.

So at this point, you have backed up your home and root directories.
Here is how your backup parition should look like now:

/backup
  |- home-joe
     |- cur
     \- 2010-09-09-12:55:55
  \- sys
     |- cur
     \- 2010-09-09-16:55:55

Obviously, the times and dates would be different. cur directory
contains the latest version of your backup. The timestamped directories
contain snapshots of cur each time after your backup. Thus if you run
backup again, this is how your backup partition will look like:

/backup
  |- home-joe
     |- cur
     |- 2010-09-09-12:55:55
     \- 2010-12-30-20:00:00
  \- sys
     |- cur
     |- 2010-09-09-12:55:55
     \- 2010-12-30-23:00:00

At any point in time, cur would have the same content as the latest
timestamped directory (e.g. cur is same as 2010-12-30-23:00:00).

Now let's say you have backed up every day for past 3 months. At some
point you're going to stop caring about day to day backups in distant
past. rsyncbtrfs provides a command called 'organize' which lets you
define rules based on which certain backups are kept and the rest are
deleted. Here's an example that would give a feel of what organize can
do:

Assume you have backups in /backup/sys (with the same structure as above
examples). We want to keep 1 backup per day for past 7 days, 1 backup
per week for next 3 weeks after that, 1 backup per fortnight for 8 weeks
after that and 1 backup per month for next 10 months after that. To
accomplish this, you can simply run the following:

$ rsyncbtrfs organize /backup /backup/sys 1D7 1W3 2W8 1M10

1D7 means 1 backup in intervals of 1D (1 day) for 7 intervals (7 * 1 day
= 7 days). 2W8 means 1 backup in intervals of 2W (2 weeks) for 4
intervals (4 * 2 weeks = 8 weeks), etc. Other letters you can use as
base unit of intervals are:
  s for seconds
  m for minutes
  h for hours
  D for days
  W for weeks
  M for months
  Q for quarters
  Y for years

Also note that the time of last backup is used as reference for all
intervals you specify.

That's it folks. To see the command line options of rsyncbtrfs, run it
with -h option.
